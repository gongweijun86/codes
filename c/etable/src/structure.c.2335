/*
 * structure.c
 *
 *  Created on: 2011-4-7
 *      Author: orion
 */

#include "../include/structure.h"

void copy_bytes(BYTE *dest, const BYTE *src, int len) {
/*	if (src < dest) {
		for (tmp_counter = len - 1; tmp_counter >= 0; tmp_counter--)
			dest[tmp_counter] = src[tmp_counter];
	} else if (src > dest)
		for (tmp_counter = 0; tmp_counter < len; tmp_counter++)
			dest[tmp_counter] = src[tmp_counter];
	else
		;
	*/
	int tmp_counter;
	for (tmp_counter = 0; tmp_counter < len; tmp_counter++)
		dest[tmp_counter] = src[tmp_counter];
}

int put_in_new_stream(int file_network_etc_handle, BYTE *dest, int buff_len, int *current_pos) {

	int read_len = TS_LENGTH;

	//	数据缓冲区中剩余的数据不足一个TS_LENGTH
	if ((buff_len - *current_pos) < TS_LENGTH && (buff_len - *current_pos) > 1) {
		memcpy(dest, (BYTE *) (dest + *current_pos), buff_len - *current_pos);
		read_len = read(file_network_etc_handle, dest + buff_len - *current_pos, *current_pos);
		if (read_len == -1)
			return RTUN_READ_FAILURE;
		*current_pos = 0;
	} else {
		read_len = read(file_network_etc_handle, dest, buff_len);
		if (read_len == -1)
			return RTUN_READ_FAILURE;
		*current_pos = 0;
	}
	return read_len;
}

BOOL read_next_ts_from_stream(BYTE *dest, BYTE *src, int src_len,
		int *current_pos) {
	if ((src_len - *current_pos) < TS_LENGTH)
		return FALSE;
	else if (*(src + *current_pos + TS_LENGTH) == 0x47) {
		memcpy(dest, (BYTE *) (src + *current_pos), TS_LENGTH);
		*current_pos += TS_LENGTH;
		return TRUE;
	} else {
		printf("sync byte missed!!!");
		return FALSE;
	}
}

BOOL is_pat(BYTE *ts_stream) {
	int pid = TS_PACKET_PID(ts_stream);
	if (pid == 0x0)
		return TRUE;
	return FALSE;
}

BOOL is_pmt(BYTE *ts_stream, pat *tpat) {
	int pid = TS_PACKET_PID(ts_stream);
	int i;

	for (i = 0; i < tpat->numbers_of_pat_item; i++)
		if (pid == tpat->pat_items[i].pmt_pid)
			return TRUE;
	return FALSE;
}

BOOL process_pat(BYTE *ts_stream, pat *tpat) {
	BOOL flag = FALSE;
	if (!TS_PACKET_TRANS_ERROR(ts_stream)) {
		int association_section_offset = -1;
		switch (TS_PACKET_ADAPTATION(ts_stream)) {
		case (0x1): {
			association_section_offset = 4 + TS_PACKET_PAYLOAD_START(ts_stream);
			break;
		}
		case (0x3): {
			//4:TS header;1:adapttion_field_length;
			association_section_offset = TS_PACKET_ADAPT_LEN(ts_stream) + 1 + 4
					+ TS_PACKET_PAYLOAD_START(ts_stream);
			break;
		}
		case (0x2)://只有调整字段 不处理
		default:
			break;
		}

		BYTE *ppat = ts_stream + association_section_offset;
		if (PAT_CURRENT_NEXT(ppat)) {//当前pat可用
			int numbers_of_pmt = 0;
			u_int pat_section_length = PAT_SECTION_LENGTH(ppat);
			numbers_of_pmt = (pat_section_length - 9) / 4;

			int i;
			BYTE *temp_ppat = ppat;
			tpat->numbers_of_pat_item = 0;
			for (i = 0; i < numbers_of_pmt; i++) {
				tpat->pat_items[i].programe_number
						= PAT_PROGRAME_NUMBER(temp_ppat);
				tpat->pat_items[i].pmt_pid = PAT_PID(temp_ppat);
				tpat->numbers_of_pat_item += 1;
				temp_ppat += 4;
				tpat->pat_items[i].crc = PAT_CRC(ppat);
			}
			flag = TRUE;
		}
	}
	return flag;
}

BOOL process_pmt(BYTE *ts_stream, pmt *tpmt) {
	BOOL flag = FALSE;
	if (!TS_PACKET_TRANS_ERROR(ts_stream)) {
		int association_section_offset = -1;
		switch (TS_PACKET_ADAPTATION(ts_stream)) {
		case (0x1): {
			association_section_offset = 4 + TS_PACKET_PAYLOAD_START(ts_stream);
			break;
		}
		case (0x3): {
			//4:TS header;1:adapttion_field_length;
			association_section_offset = TS_PACKET_ADAPT_LEN(ts_stream) + 1 + 4
					+ TS_PACKET_PAYLOAD_START(ts_stream);
			break;
		}
		case (0x2)://只有调整字段 不处理
		default:
			break;
		}

		BYTE *ppmt = ts_stream + association_section_offset;

		//u_int programe_number = PMT_PROGRAME_NUMBER(ppmt);
		//问题：一个TS包是不是只传送一个PMT 不同的PMT用不同的TS传送
		//此处假设是
		u_int pmt_section_length = PMT_SECTION_LENGTH(ppmt);
		u_int programe_info_length = PMT_PROGRAME_INFO_LENGTH(ppmt);

		//12:descriptor之前的字节 pstream指向stream的首地址
		BYTE *pstream = ppmt + programe_info_length + 12;
		BYTE *temp_pstream = pstream;
		//9:section_length--programe_info_length;4:crc
		u_int stream_len = pmt_section_length - programe_info_length - 9 - 4;
		u_int stream_section_len = 0;


		tpmt->numbers_of_pmt_item = 0;
		tpmt->pmt_pid = TS_PACKET_PID(ts_stream);
		u_int k = 0;
		for(;stream_section_len < stream_len;){
			BYTE type = *temp_pstream;
			u_int elementary_id = (*(temp_pstream + 1) & 0x1f) << 8| (*(temp_pstream + 2));
			u_int es_info_length = (*(temp_pstream + 3) & 0x0f) << 8| (*(temp_pstream + 4));

			tpmt->pmt_items[k].steam_type = type;
			tpmt->pmt_items[k].stream_pid = elementary_id;
			tpmt->pmt_items[k].stream_number = k;
			tpmt->pmt_items[k].crc = PMT_CRC(ppmt);
			tpmt->pmt_items[k].p_info_len = PMT_PROGRAME_INFO_LENGTH(ppmt);
			tpmt->pmt_items[k].es_info_len = PMT_ESINFO_LENGTH(ppmt);
			tpmt->pmt_items[k].pmt_sec_len = PMT_SECTION_LENGTH(ppmt);
			tpmt->numbers_of_pmt_item += 1;

			k++;
			stream_section_len = stream_section_len + 5 + es_info_length;
			temp_pstream = temp_pstream + stream_section_len;
		}
		flag = TRUE;
	}
	return flag;
}

